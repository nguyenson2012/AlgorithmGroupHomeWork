/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// Time complexity: next() - O(h); hasNext - O(1)
// Space complexity: O(1) 
// Explanation: Push all left node whenever possible and backtrack to parent node

class BSTIterator {

public:
    stack<TreeNode*> treeSt;
    BSTIterator(TreeNode* root) {
        pushAllLeft(root);
    }
    
    void pushAllLeft(TreeNode* node){
        for(; node != NULL; node = node->left){
            treeSt.push(node);
        }
    }

    int next() {
        TreeNode* temp = treeSt.top();
        treeSt.pop();
        pushAllLeft(temp->right);
        return temp->val;
    }
    
    bool hasNext() {
        return !treeSt.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */