/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// Time complexity: O(n)
// Space complexity: O(h) - height of the Tree 
// Explanation: Using recursive dfs

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return isValid(root, LONG_MIN, LONG_MAX);
    }

    bool isValid(TreeNode* root, long min, long max){
        if(!root) return true;

        if(!(min < root->val && root->val < max))
            return false;

        // left subtree < node's key -> update max = node's value 
        bool left = isValid(root->left, min, root->val);
        // right subtree > node's key -> update min = node's value
        bool right = isValid(root->right, root->val, max);
        return (left && right);
    }
};