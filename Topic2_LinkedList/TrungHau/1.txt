// Time complexity: O(n)
// Space complexity: O(n)
// Description: Using a new ListNode to save new Node. And combinate push Node to new ListNode. 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* head_temp = NULL;
        ListNode* temp = head;
         
        while(temp != NULL)
        {
            ListNode* newNode = new ListNode(temp->val, head_temp);
            head_temp = newNode;
            temp = temp->next;
        }
        return head_temp;
    }
};
