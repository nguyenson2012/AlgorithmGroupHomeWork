/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// Time complexity: O(n+m)- n: size of list1, m: size of list2
// Space complexity: O(1) - The algorithm merges the lists by rearranging the 'next' pointers of node. 
//                          It does not create a new nodes -> no use additional data structure for storing nodes.
// Explaination: Use a dummy node as starting point. 
// 		 Then traverse 2 linked list and pick the smallest element to push back at each iterate.

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        // Dummy node to act as the starting point
        ListNode dummy;
        ListNode *tail = &dummy;
        
        // Traverse both lists
        while (list1 != nullptr && list2 != nullptr) {
            if (list1->val <= list2->val) {
                tail->next = list1;
                list1 = list1->next;
            } else {
                tail->next = list2;
                list2 = list2->next;
            }
            tail = tail->next;
        }

        // Attach the remaining nodes
        if (list1 != nullptr) {
            tail->next = list1;
        } else {
            tail->next = list2;
        }

        // Return the merged list, starting from dummy.next
        return dummy.next;
    }
};