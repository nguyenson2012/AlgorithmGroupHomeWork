/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
 };
 */

// Time Complexity: O(n)
// Space Complexity: O(1)
// Explanation: Using *temp to store the next pointer of head(head->next). 
//              Because after that, the head->next will point to *rev pointer.
// Expected: rev <- 1 <- 2 <- 3

class Solution {
public:
    ListNode *reverseList(ListNode *head) {
        ListNode *rev = nullptr;
        while(head != nullptr){
            ListNode *temp = head->next;
            head->next = rev;
            rev = head;
            head = temp;
        }
        return rev;
    }
};