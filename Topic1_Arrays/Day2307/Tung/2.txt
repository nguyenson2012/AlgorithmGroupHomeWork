// Description: Use vector and loop:
+ First, Add the first element in vector intervals to the new vector;
+ Second, Use loop and check the case to save result 
// Time complexity: O (n log(n))
// Memory complexity: O (n)
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin() , intervals.end());

        vector<vector<int>> merge;

        merge.push_back(intervals[0]);
        
        for(int i = 1 ; i < intervals.size() ; i++)
        {
            if(merge.back()[1] >= intervals[i][0])
            {
                merge.back()[1] = max(merge.back()[1] , intervals[i][1]);
            }
            else
            {
                merge.push_back(intervals[i]);
            }
        }
        return merge;
        
    }
};
