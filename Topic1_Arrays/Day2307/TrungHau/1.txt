// Time complexity: O(n * 3 + log(n)) 
// Memory compexity: (i don't know how to calculate)
// Using array to seperate rate. 

class Solution {
public:
    int sum = 0;
    vector <double> percent;
    Solution(vector<int>& w) {
    srand(time(NULL));
    for(int i = 0;  i < w.size(); i++){
        sum += w[i];
    }
    for(int i = 0; i < w.size(); i++){
       percent.push_back(w[i] * 1.0 / (sum * 1.0) * 100.0);
    }
    for(int i = 1; i < percent.size(); i++){
       percent[i] =percent[i] + percent[i - 1];
    }

    }
    int pickIndex() {
        double temp = (rand() % 100);
        auto a = upper_bound(percent.begin(), percent.end(), temp);
        return a - percent.begin();
    }
};
