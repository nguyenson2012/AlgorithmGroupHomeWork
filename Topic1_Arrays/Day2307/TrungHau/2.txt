// Time complexity: O(n)
// Memory complexity: 
// Using two pointer to compare end previous and start next. If it satisfied about end previous is larger than start next. I will erase index that and update index present. But that is not the best effecient way.
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> res;
        for(int i = 0; i < intervals.size(); i++){
            for(int j = i + 1; j < intervals.size(); j++){
                if(intervals[i][1] >= intervals[j][0]){
                    intervals[i][1] = max(intervals[j][1], intervals[i][1]);
                    intervals.erase(intervals.begin() + j);
                    j--;
                }
                else break;
            }
            res.push_back(intervals[i]);
        }
    return res;
    }
};
