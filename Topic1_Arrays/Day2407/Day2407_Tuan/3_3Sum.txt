// Time complexity: O(n^2)
// Space complexity: O(1) 
// Explanation: Using 1 pivot i and 2 pointer j and k 
//		Skip the duplicate elements

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        int len = nums.length;
        for(int i = 0; i < len - 2; i++){
            // Skip duplicate elements in nums array to avoid duplicate triplets
            if(i > 0 && nums[i] == nums[i-1])
                continue;

            // i is like the pivot
            // j/k is left/right ptr of the rest interval 
            int j = i + 1, k = len - 1;

            while(j < k){
                int sum = nums[i] + nums[j] + nums[k];
                if(sum > 0){
                    --k;
                }else if(sum < 0){
                    ++j;
                }else{
                    res.add(Arrays.asList(nums[i], nums[j], nums[k]));
                    ++j;

                    // Avoid duplicate nums[j] if nums[j] == nums[j-1]
                    while(nums[j] == nums[j-1] && j < k)
                        ++j;
                }
            }
        }
        return res;
    }
}