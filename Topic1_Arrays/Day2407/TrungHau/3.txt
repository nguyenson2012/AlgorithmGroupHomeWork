// Time complexity: O(n * log(n))
// Memory complexity: ...
// Description: Using two pointer to find nums[j] and nums[k] and use set container to avoid duplicate.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector <vector<int>> res;
        set <pair<int, int>> check;
        sort(nums.begin(), nums.end());

        for(int i = 0; i < nums.size(); i++){
            int j = i + 1;
            int k = nums.size() - 1;
            while(j < k){
                if(nums[i] + nums[j] + nums[k] == 0){
                    check.insert(make_pair(max(nums[i], max(nums[j], nums[k])), min(nums[i], min(nums[j], nums[k]))));
                j++;
                k--;
                }
                else if(nums[i] + nums[j] + nums[k] > 0)
                {
                    k--;
                } else j++;
            }
        }
        for(const auto& a : check){
            vector<int> temp{a.first, a.second, -(a.first + a.second)};
            res.emplace_back(temp);
        }
        return res;
    }
};
