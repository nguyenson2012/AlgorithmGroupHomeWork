// Description: Use priority_queue and do it have't more k elements.
// Time complexity: O(n * log(k)).
// Memory complexity: O(k).
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int , vector<int> , greater<int>> pq;
        for(int i = 0 ; i < nums.size() ; i++)
        {
            pq.push(nums[i]);
            if(pq.size() > k)
            {
                pq.pop();
            }
        }
        return pq.top();
        return 0;
    }
};
